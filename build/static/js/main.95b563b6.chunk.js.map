{"version":3,"sources":["Header/Header.tsx","workTypes.ts","WorkFlowList/WorkFlowListAction.ts","WorkFlowList/WFListHeader/WFListHeader.tsx","WorkFlowList/WFListItem/WFListItem.tsx","WorkFlowList/WorkFlowList.tsx","WorkItem/WorkList/workListAction.ts","WorkItem/WorkList/WorkList.tsx","WorkItem/WorkFlow/workFlowAction.ts","WorkItem/WorkFlow/WorkFlow.tsx","WorkItem/WorkItem.tsx","App.tsx","serviceWorker.ts","WorkItem/workflowUtils.ts","WorkItem/workItemReducer.ts","reducers.ts","store.ts","index.tsx"],"names":["Header","STATUS","className","setWorkFlowAction","item","type","payload","deleteWorkFlowAction","id","updateStatusAction","status","COMPLETED","changeSearchInputAction","name","setFilteredWorkFlows","wfs","changeSearchStatusAction","options","WFListHeader","createWFHandler","props","createWorkFlow","resetSearch","handleKeywordChange","event","changeSearchInput","target","value","handleStatusChange","changeSearchStatus","this","search","keyword","onChange","map","val","onClick","React","Component","mapDispatchToProps","dispatch","a","getState","workflows","items","newWFS","filter","wf","includes","toLowerCase","connect","state","searchFilter","WFList","showDeleteIcon","showDelIcon","setState","hideDelIcon","handleWorkListClick","setCurrentWF","deleteWorkFlowHandler","stopPropagation","deleteWorkFlow","getStausClass","changeStatusHandler","updateStatus","PENDING","find","itemVal","onMouseEnter","onMouseLeave","title","WorkFlowList","showWFItemScreen","filteredWorkflows","changeStatusAction","workList","changeStatus","statusClass","content","updateWorkFlowNameAction","workFlow","addNodehandler","addNode","deleteNodehandler","deleteNode","shuffleNodehandler","shuffleNode","workFlowNameChangeHandler","saveWorkFlowName","currentWorkFlow","hideWFScreen","workItem","getClassname","INPROGRESS","App","Boolean","window","location","hostname","match","updateNodeStatus","shuffleArray","array","sort","b","Math","random","defaultState","undefined","itemReducer","action","oldWorkFlow","Object","assign","newNode","length","oldState","push","oldState1","pop","newWF","targetWF2","workFlows","newItem","newWorkFlows","targetWF","targetWF1","forEach","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.95b563b6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n      <section className=\"header-label\">FlowAPP</section>\r\n      <button className=\"logout-button\">Logout</button>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","export enum STATUS {\r\n  PENDING = \"pending\",\r\n  INPROGRESS = \"inprogress\",\r\n  COMPLETED = \"completed\",\r\n}\r\n\r\nexport type WorkFlowItems = {\r\n  id: string;\r\n  name: string;\r\n  content: string;\r\n  status: STATUS;\r\n};\r\n\r\nexport type WorkFlows = {\r\n  id: number;\r\n  name: string;\r\n  items: Array<WorkFlowItems>;\r\n  status: string;\r\n};\r\n\r\nexport type SearchFilter = {\r\n  keyword: string;\r\n  status: string;\r\n};\r\n","import { STATUS, WorkFlows } from \"../workTypes\";\r\n\r\nexport const setWorkFlowAction = (item: WorkFlows) => ({\r\n  type: \"SET_CURRENT_WORKFLOW\",\r\n  payload: item,\r\n});\r\n\r\nexport const setCurrentWF = (item: WorkFlows) => async (\r\n  dispatch: any\r\n): Promise<void> => {\r\n  dispatch(setWorkFlowAction(item));\r\n};\r\n\r\nexport const createWorkFlowAction = () => ({\r\n  type: \"CREATE_WORKFLOW\",\r\n});\r\n\r\nexport const createWorkFlow = () => async (dispatch: any): Promise<void> => {\r\n  dispatch(createWorkFlowAction());\r\n};\r\n\r\nexport const deleteWorkFlowAction = (id: number) => ({\r\n  type: \"DELETE_WORKFLOW\",\r\n  payload: id,\r\n});\r\n\r\nexport const deleteWorkFlow = (id: number) => async (\r\n  dispatch: any\r\n): Promise<void> => {\r\n  dispatch(deleteWorkFlowAction(id));\r\n};\r\n\r\nexport const updateStatusAction = (id: number, status: STATUS) => ({\r\n  type:\r\n    status === STATUS.COMPLETED\r\n      ? \"UPDATE_WORKFLOW_COMPLETE\"\r\n      : \"UPDATE_WORKFLOW_PENDING\",\r\n  payload: id,\r\n});\r\n\r\nexport const updateStatus = (id: number, status: STATUS) => async (\r\n  dispatch: any\r\n): Promise<void> => {\r\n  dispatch(updateStatusAction(id, status));\r\n};\r\n\r\nexport const changeWFNameAction = (id: number, name: string) => ({\r\n  type: \"UPDATE_WORKFLOW_NAME\",\r\n  payload: {\r\n    id,\r\n    name,\r\n  },\r\n});\r\n\r\nexport const changeWFName = (id: number, name: string) => async (\r\n  dispatch: any\r\n): Promise<void> => {\r\n  dispatch(changeWFNameAction(id, name));\r\n};\r\n\r\nexport const changeSearchInputAction = (name: string) => ({\r\n  type: \"UPDATE_SEARCH_KEYWORD\",\r\n  payload: name,\r\n});\r\n\r\nexport const setFilteredWorkFlows = (wfs: Array<WorkFlows>) => ({\r\n  type: \"SET_FILTERED_WORKFLOWS\",\r\n  payload: wfs,\r\n});\r\n\r\nexport const changeSearchInput = (name: string) => async (\r\n  dispatch: any,\r\n  getState: any\r\n): Promise<void> => {\r\n  dispatch(changeSearchInputAction(name));\r\n  const { workflows } = getState().items;\r\n  const newWFS = workflows.filter((wf: WorkFlows) => wf.name.includes(name));\r\n  dispatch(setFilteredWorkFlows(newWFS));\r\n};\r\n\r\nexport const changeSearchStatusAction = (name: string) => ({\r\n  type: \"UPDATE_SEARCH_STATUS\",\r\n  payload: name,\r\n});\r\n\r\nexport const changeSearchStatus = (name: string) => async (\r\n  dispatch: any,\r\n  getState: any\r\n): Promise<void> => {\r\n  dispatch(changeSearchStatusAction(name));\r\n  const { workflows } = getState().items;\r\n  const newWFS =\r\n    name === \"All\"\r\n      ? workflows\r\n      : workflows.filter(\r\n          (wf: WorkFlows) => wf.status.toLowerCase() === name.toLowerCase()\r\n        );\r\n  dispatch(setFilteredWorkFlows(newWFS));\r\n};\r\n\r\nexport const resetSearchAction = () => ({\r\n  type: \"RESET_SEARCH\",\r\n});\r\n\r\nexport const resetSearch = () => async (dispatch: any): Promise<void> => {\r\n  dispatch(resetSearchAction());\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { SearchFilter } from \"../../workTypes\";\r\nimport { createWorkFlow } from \"../WorkFlowListAction\";\r\nimport \"./WFListHeader.css\";\r\nimport {\r\n  changeSearchInput,\r\n  changeSearchStatus,\r\n  resetSearch,\r\n} from \"../WorkFlowListAction\";\r\n\r\nexport type WFListHeaderProps = {\r\n  search: SearchFilter;\r\n  changeSearchInput: Function;\r\n  changeSearchStatus: Function;\r\n  createWorkFlow: Function;\r\n  resetSearch: Function;\r\n};\r\n\r\nconst options = [\"All\", \"Completed\", \"Pending\"];\r\n\r\nexport class WFListHeader extends React.Component<WFListHeaderProps> {\r\n  createWFHandler = () => {\r\n    this.props.createWorkFlow();\r\n    this.props.resetSearch();\r\n  };\r\n\r\n  handleKeywordChange = (event: any) => {\r\n    this.props.changeSearchInput(event.target.value);\r\n  };\r\n\r\n  handleStatusChange = (event: any) => {\r\n    this.props.changeSearchStatus(event.target.value);\r\n  };\r\n\r\n  render() {\r\n    const { keyword, status } = this.props.search || {\r\n      keyword: \"\",\r\n      status: \"\",\r\n    };\r\n    return (\r\n      <div className=\"wflist-header\">\r\n        <section className=\"wflist-filter\">\r\n          <input\r\n            className=\"wflist-title\"\r\n            type=\"text\"\r\n            value={keyword}\r\n            onChange={this.handleKeywordChange}\r\n          />\r\n          <select onChange={this.handleStatusChange} value={status}>\r\n            {options.map((val) => (\r\n              <option value={val}>{val}</option>\r\n            ))}\r\n          </select>\r\n        </section>\r\n        <button className=\"createwf-button\" onClick={this.createWFHandler}>\r\n          + Create Work Flow\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  search: state.items.searchFilter,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  createWorkFlow,\r\n  changeSearchInput,\r\n  changeSearchStatus,\r\n  resetSearch,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WFListHeader);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { STATUS, WorkFlowItems, WorkFlows } from \"../../workTypes\";\r\nimport {\r\n  setCurrentWF,\r\n  deleteWorkFlow,\r\n  updateStatus,\r\n} from \"../WorkFlowListAction\";\r\nimport \"./WFListItem.css\";\r\n\r\nexport type WFListProps = {\r\n  item: WorkFlows;\r\n  setCurrentWF: Function;\r\n  deleteWorkFlow: Function;\r\n  updateStatus: Function;\r\n};\r\n\r\nexport type WFListState = {\r\n  showDeleteIcon: boolean;\r\n};\r\n\r\nexport class WFList extends React.Component<WFListProps, WFListState> {\r\n  state: WFListState = {\r\n    showDeleteIcon: false,\r\n  };\r\n\r\n  showDelIcon = () => {\r\n    this.setState({\r\n      showDeleteIcon: true,\r\n    });\r\n  };\r\n\r\n  hideDelIcon = () => {\r\n    this.setState({\r\n      showDeleteIcon: false,\r\n    });\r\n  };\r\n\r\n  handleWorkListClick = () => {\r\n    this.props.setCurrentWF(this.props.item);\r\n  };\r\n\r\n  deleteWorkFlowHandler = (event: any) => {\r\n    event.stopPropagation();\r\n    this.props.deleteWorkFlow(this.props.item.id);\r\n  };\r\n\r\n  getStausClass = () => {\r\n    if (this.props.item.status === STATUS.COMPLETED) {\r\n      return \"completed wf-item-status\";\r\n    }\r\n    return \"wf-item-status\";\r\n  };\r\n\r\n  changeStatusHandler = (event: any) => {\r\n    event.stopPropagation();\r\n    const { item } = this.props;\r\n    if (item.status === STATUS.COMPLETED) {\r\n      this.props.updateStatus(this.props.item.id, STATUS.PENDING);\r\n    } else {\r\n      const { items } = this.props.item;\r\n      const hasPendingNodes = items.find(\r\n        (itemVal: WorkFlowItems) => itemVal.status !== STATUS.COMPLETED\r\n      );\r\n      if (!hasPendingNodes) {\r\n        this.props.updateStatus(this.props.item.id, STATUS.COMPLETED);\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { item } = this.props;\r\n    return (\r\n      <div\r\n        onMouseEnter={this.showDelIcon}\r\n        onMouseLeave={this.hideDelIcon}\r\n        className=\"work-list\"\r\n      >\r\n        {this.state.showDeleteIcon && (\r\n          <div\r\n            className=\"status-flow\"\r\n            onClick={this.deleteWorkFlowHandler}\r\n            title={item.status}\r\n          >\r\n            X\r\n          </div>\r\n        )}\r\n        <input className=\"flow-title\" type=\"text\" value={item.name} />\r\n        <section className=\"wf-status\">\r\n          {item.status}\r\n          <div\r\n            className={this.getStausClass()}\r\n            title={item.status}\r\n            onClick={this.changeStatusHandler}\r\n          ></div>\r\n        </section>\r\n        <section className=\"wf-details\" onClick={this.handleWorkListClick}>\r\n          See WorkFlow Details\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({});\r\n\r\nconst mapDispatchToProps = {\r\n  setCurrentWF,\r\n  deleteWorkFlow,\r\n  updateStatus,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WFList);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { WorkFlows } from \"../workTypes\";\r\nimport WFListHeader from \"./WFListHeader/WFListHeader\";\r\nimport WFList from \"./WFListItem/WFListItem\";\r\nimport \"./WorkFlowList.css\";\r\n\r\nexport type WorkFlowListProps = {\r\n  workflows: Array<WorkFlows>;\r\n  showWFItemScreen: boolean;\r\n};\r\n\r\nexport class WorkFlowList extends React.Component<WorkFlowListProps> {\r\n  render() {\r\n    const { workflows, showWFItemScreen } = this.props;\r\n    return !showWFItemScreen ? (\r\n      <div className=\"work-flow-item\">\r\n        <WFListHeader />\r\n        <section className=\"items\">\r\n          {workflows && workflows.map((item: any) => <WFList item={item} />)}\r\n        </section>\r\n      </div>\r\n    ) : null;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  workflows: state.items.filteredWorkflows,\r\n  showWFItemScreen: state.items.showWFItemScreen,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkFlowList);\r\n","export const changeStatusAction = (item: any) => ({\r\n  type: \"CHANGE_STATUS\",\r\n  payload: item,\r\n});\r\n\r\nexport const changeStatus = (item: any) => async (\r\n  dispatch: any\r\n): Promise<void> => {\r\n  dispatch(changeStatusAction(item));\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./WorkList.css\";\r\nimport { changeStatus } from \"../WorkList/workListAction\";\r\n\r\nexport type workListProps = {\r\n  item: any;\r\n  statusClass: string;\r\n  changeStatus: Function;\r\n};\r\n\r\nexport class workList extends React.Component<workListProps> {\r\n  componentDidMount() {}\r\n\r\n  changeStatusHandler = () => {\r\n    this.props.changeStatus(this.props.item);\r\n  };\r\n\r\n  render() {\r\n    const { item, statusClass } = this.props;\r\n    return (\r\n      <div className=\"work-list\">\r\n        <div\r\n          className={statusClass}\r\n          title={item.status}\r\n          onClick={this.changeStatusHandler}\r\n        ></div>\r\n        <input className=\"task-title\" type=\"text\" value={item.name} />\r\n        <textarea className=\"content\" value={item.content} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({});\r\n\r\nconst mapDispatchToProps = {\r\n  changeStatus,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(workList);\r\n","export const addNodeAction = () => ({\r\n  type: \"ADD_NODE\",\r\n});\r\n\r\nexport const addNode = () => async (dispatch: any): Promise<void> => {\r\n  dispatch(addNodeAction());\r\n};\r\n\r\nexport const deleteNodeAction = () => ({\r\n  type: \"DELETE_NODE\",\r\n});\r\n\r\nexport const deleteNode = () => async (dispatch: any): Promise<void> => {\r\n  dispatch(deleteNodeAction());\r\n};\r\n\r\nexport const shuffleNodeAction = () => ({\r\n  type: \"SHUFFLE_NODE\",\r\n});\r\n\r\nexport const shuffleNode = () => async (dispatch: any): Promise<void> => {\r\n  dispatch(shuffleNodeAction());\r\n};\r\n\r\nexport const updateWorkFlowNameAction = (name: string, id: number) => ({\r\n  type: \"UPDATE_CURRENT_WORKFLOW_NAME\",\r\n  payload: {\r\n    id,\r\n    name,\r\n  },\r\n});\r\n\r\nexport const updateWorkFlowName = (name: string, id: number) => async (\r\n  dispatch: any\r\n): Promise<void> => {\r\n  dispatch(updateWorkFlowNameAction(name, id));\r\n};\r\n\r\nexport const hideWFScreenAction = () => ({\r\n  type: \"HIDE_WF_SCREEN\",\r\n});\r\n\r\nexport const hideWFScreen = () => async (dispatch: any): Promise<void> => {\r\n  dispatch(hideWFScreenAction());\r\n};\r\n\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { WorkFlows } from \"../../workTypes\";\r\nimport \"./WorkFlow.css\";\r\nimport {\r\n  addNode,\r\n  deleteNode,\r\n  shuffleNode,\r\n  updateWorkFlowName,\r\n  hideWFScreen,\r\n} from \"./workFlowAction\";\r\n\r\nexport type workListProps = {\r\n  currentWorkFlow: WorkFlows;\r\n  addNode: Function;\r\n  deleteNode: Function;\r\n  shuffleNode: Function;\r\n  saveWorkFlowName: Function;\r\n  hideWFScreen: Function;\r\n};\r\n\r\nexport class workFlow extends React.Component<workListProps> {\r\n  componentDidMount() {}\r\n\r\n  addNodehandler = () => {\r\n    this.props.addNode();\r\n  };\r\n\r\n  deleteNodehandler = () => {\r\n    this.props.deleteNode();\r\n  };\r\n\r\n  shuffleNodehandler = () => {\r\n    this.props.shuffleNode();\r\n  };\r\n\r\n  workFlowNameChangeHandler = (event: any) => {\r\n    if (event.target.value) {\r\n      this.props.saveWorkFlowName(\r\n        event.target.value,\r\n        this.props.currentWorkFlow.id\r\n      );\r\n    }\r\n  };\r\n\r\n  hideWFScreen = () => {\r\n    this.props.hideWFScreen();\r\n  };\r\n\r\n  render() {\r\n    const { currentWorkFlow } = this.props;\r\n    return (\r\n      <div className=\"workflow-header\">\r\n        <input\r\n          className=\"workflow-title\"\r\n          type=\"text\"\r\n          value={currentWorkFlow.name}\r\n          onChange={this.workFlowNameChangeHandler}\r\n        />\r\n        <section className=\"workflow-buttons\">\r\n          <button className=\"shuffle-button\" onClick={this.shuffleNodehandler}>\r\n            Shuffle\r\n          </button>\r\n          <button className=\"delete-button\" onClick={this.deleteNodehandler}>\r\n            Delete\r\n          </button>\r\n          <button className=\"add-button\" onClick={this.addNodehandler}>\r\n            Add Node\r\n          </button>\r\n          <button className=\"back-button\" onClick={this.hideWFScreen}>\r\n            back\r\n          </button>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({});\r\n\r\nconst mapDispatchToProps = {\r\n  addNode,\r\n  deleteNode,\r\n  shuffleNode,\r\n  hideWFScreen,\r\n  saveWorkFlowName: updateWorkFlowName,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(workFlow);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport WorkList from \"./WorkList/WorkList\";\r\nimport \"./WorkItem.css\";\r\nimport { STATUS, WorkFlowItems, WorkFlows } from \"../workTypes\";\r\nimport WorkFlow from \"./WorkFlow/WorkFlow\";\r\n\r\nexport type WorkItemProps = {\r\n  currentWorkFlow: WorkFlows;\r\n  showWFItemScreen: boolean;\r\n};\r\n\r\nexport class workItem extends React.Component<WorkItemProps> {\r\n  componentDidMount() {}\r\n\r\n  getClassname = (item: WorkFlowItems) => {\r\n    switch (item.status) {\r\n      case STATUS.INPROGRESS:\r\n        return \"status progress\";\r\n      case STATUS.COMPLETED:\r\n        return \"status completed\";\r\n      default:\r\n        return \"status\";\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { currentWorkFlow, showWFItemScreen } = this.props;\r\n    const items = currentWorkFlow && currentWorkFlow.items;\r\n    return showWFItemScreen ? (\r\n      <div className=\"workItem\">\r\n        <header className=\"header-item\">\r\n          <WorkFlow currentWorkFlow={currentWorkFlow} />\r\n        </header>\r\n        <section className=\"items\">\r\n          {items &&\r\n            items.map((item: WorkFlowItems) => (\r\n              <WorkList item={item} statusClass={this.getClassname(item)} />\r\n            ))}\r\n        </section>\r\n      </div>\r\n    ) : null;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  currentWorkFlow: state.items.currentWorkFlow,\r\n  showWFItemScreen: state.items.showWFItemScreen,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(workItem);\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Header from \"./Header/Header\";\nimport WorkFlowList from \"./WorkFlowList/WorkFlowList\";\nimport WorkItem from \"./WorkItem/WorkItem\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <WorkItem />\n      <WorkFlowList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { WorkFlowItems } from \"./../workTypes\";\r\nimport { STATUS } from \"../workTypes\";\r\n\r\nexport const updateNodeStatus = (item: WorkFlowItems) => {\r\n  if (item.status === STATUS.PENDING) {\r\n    item.status = STATUS.INPROGRESS;\r\n  } else if (item.status === STATUS.INPROGRESS) {\r\n    item.status = STATUS.COMPLETED;\r\n  } else {\r\n    item.status = STATUS.PENDING;\r\n  }\r\n};\r\n\r\nexport const shuffleArray = (array: any) => {\r\n  array.sort((a: any, b: any) => {\r\n    return 0.5 - Math.random();\r\n  });\r\n  return array;\r\n};\r\n","import { SearchFilter, STATUS, WorkFlowItems, WorkFlows } from \"../workTypes\";\r\nimport { shuffleArray, updateNodeStatus } from \"./workflowUtils\";\r\n\r\nexport const defaultItems = [\r\n  {\r\n    id: \"1\",\r\n    name: \"demo1\",\r\n    content: \"I am a task\",\r\n    status: STATUS.PENDING,\r\n  },\r\n  {\r\n    id: \"2\",\r\n    name: \"demo2\",\r\n    content: \"I am a task\",\r\n    status: STATUS.PENDING,\r\n  },\r\n];\r\n\r\nexport const defaultState = {\r\n  workflows: [\r\n    {\r\n      id: 1,\r\n      name: \"WorkFlow 1\",\r\n      status: STATUS.PENDING,\r\n      items: [\r\n        {\r\n          id: \"1\",\r\n          name: \"demo1\",\r\n          content: \"I am a task\",\r\n          status: STATUS.PENDING,\r\n        },\r\n        {\r\n          id: \"2\",\r\n          name: \"demo2\",\r\n          content: \"I am a task\",\r\n          status: STATUS.PENDING,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"WorkFlow 2\",\r\n      status: STATUS.PENDING,\r\n      items: [\r\n        {\r\n          id: \"1\",\r\n          name: \"demo1\",\r\n          content: \"I am a task\",\r\n          status: STATUS.PENDING,\r\n        },\r\n        {\r\n          id: \"2\",\r\n          name: \"demo2\",\r\n          content: \"I am a task\",\r\n          status: STATUS.PENDING,\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  filteredWorkflows: [\r\n    {\r\n      id: 1,\r\n      name: \"WorkFlow 1\",\r\n      status: STATUS.PENDING,\r\n      items: [\r\n        {\r\n          id: \"1\",\r\n          name: \"demo1\",\r\n          content: \"I am a task\",\r\n          status: STATUS.PENDING,\r\n        },\r\n        {\r\n          id: \"2\",\r\n          name: \"demo2\",\r\n          content: \"I am a task\",\r\n          status: STATUS.PENDING,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"WorkFlow 2\",\r\n      status: STATUS.PENDING,\r\n      items: [\r\n        {\r\n          id: \"1\",\r\n          name: \"demo1\",\r\n          content: \"I am a task\",\r\n          status: STATUS.PENDING,\r\n        },\r\n        {\r\n          id: \"2\",\r\n          name: \"demo2\",\r\n          content: \"I am a task\",\r\n          status: STATUS.PENDING,\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  currentWorkFlow: undefined,\r\n  showWFItemScreen: false,\r\n  searchFilter: {\r\n    keyword: \"\",\r\n    status: \"\",\r\n  },\r\n};\r\n\r\nexport type RootState = {\r\n  workflows: Array<WorkFlows>;\r\n  filteredWorkflows: Array<WorkFlows>;\r\n  currentWorkFlow: WorkFlows | undefined;\r\n  showWFItemScreen: boolean;\r\n  searchFilter: SearchFilter;\r\n};\r\n\r\nconst itemReducer = (state: RootState = defaultState, action: any) => {\r\n  switch (action.type) {\r\n    case \"CHANGE_STATUS\":\r\n      const item = action.payload;\r\n      updateNodeStatus(item);\r\n      const oldWorkFlow: WorkFlows = { ...state.currentWorkFlow! };\r\n      Object.assign([...oldWorkFlow.items], item);\r\n      return {\r\n        ...state,\r\n        currentWorkFlow: {\r\n          ...oldWorkFlow,\r\n        },\r\n      };\r\n    case \"ADD_NODE\":\r\n      const newNode: WorkFlowItems = {\r\n        id: `${state.currentWorkFlow!.items.length + 1}`,\r\n        name: \"Default Name\",\r\n        content: \"Default Content\",\r\n        status: STATUS.PENDING,\r\n      };\r\n      let oldState: WorkFlows = { ...state.currentWorkFlow! };\r\n      oldState.items.push(newNode);\r\n      return {\r\n        ...state,\r\n        currentWorkFlow: {\r\n          ...oldState,\r\n        },\r\n      };\r\n\r\n    case \"DELETE_NODE\":\r\n      const oldState1: WorkFlows = { ...state.currentWorkFlow! };\r\n      oldState1.items.pop();\r\n      return {\r\n        ...state,\r\n        currentWorkFlow: {\r\n          ...state.currentWorkFlow,\r\n        },\r\n      };\r\n\r\n    case \"SHUFFLE_NODE\":\r\n      return {\r\n        ...state,\r\n        currentWorkFlow: {\r\n          ...state.currentWorkFlow,\r\n          items: shuffleArray(state.currentWorkFlow!.items),\r\n        },\r\n      };\r\n    case \"UPDATE_CURRENT_WORKFLOW_NAME\":\r\n      const { id, name } = action.payload;\r\n      const newWF = [...state.workflows];\r\n      const targetWF2 = newWF.find((wf: WorkFlows) => wf.id === id);\r\n      targetWF2!.name = name;\r\n      return {\r\n        ...state,\r\n        currentWorkFlow: {\r\n          ...state.currentWorkFlow,\r\n          name: name,\r\n        },\r\n        workFlows: [...state.workflows, newWF],\r\n      };\r\n    case \"SET_CURRENT_WORKFLOW\":\r\n      return {\r\n        ...state,\r\n        currentWorkFlow: {\r\n          ...action.payload,\r\n        },\r\n        showWFItemScreen: true,\r\n      };\r\n    case \"HIDE_WF_SCREEN\":\r\n      return {\r\n        ...state,\r\n        showWFItemScreen: false,\r\n      };\r\n    case \"CREATE_WORKFLOW\":\r\n      const newItem = {\r\n        id: `${state.workflows.length + 1}`,\r\n        name: \"Default WorkFlow Name\",\r\n        items: [],\r\n        status: STATUS.PENDING,\r\n      };\r\n      return {\r\n        ...state,\r\n        workflows: [...state.workflows, newItem],\r\n        filteredWorkflows: [...state.workflows, newItem],\r\n      };\r\n    case \"DELETE_WORKFLOW\":\r\n      const newWorkFlows = state.workflows.filter(\r\n        (wf: WorkFlows) => wf.id !== action.payload\r\n      );\r\n      return {\r\n        ...state,\r\n        workflows: [...newWorkFlows],\r\n        filteredWorkflows: [...newWorkFlows],\r\n      };\r\n\r\n    case \"UPDATE_WORKFLOW_COMPLETE\":\r\n      const targetWF = state.workflows.find(\r\n        (wf: WorkFlows) => wf.id === action.payload\r\n      );\r\n      targetWF!.status = STATUS.COMPLETED;\r\n      return {\r\n        ...state,\r\n        workflows: Object.assign([...state.workflows], targetWF),\r\n      };\r\n\r\n    case \"UPDATE_WORKFLOW_PENDING\":\r\n      const targetWF1 = state.workflows.find(\r\n        (wf: WorkFlows) => wf.id === action.payload\r\n      );\r\n      targetWF1!.status = STATUS.PENDING;\r\n      targetWF1!.items.forEach(\r\n        (val: WorkFlowItems) => (val.status = STATUS.PENDING)\r\n      );\r\n      return {\r\n        ...state,\r\n        workflows: Object.assign([...state.workflows], targetWF1),\r\n      };\r\n    case \"SET_FILTERED_WORKFLOWS\":\r\n      return {\r\n        ...state,\r\n        filteredWorkflows: action.payload,\r\n      };\r\n    case \"UPDATE_SEARCH_KEYWORD\":\r\n      return {\r\n        ...state,\r\n        searchFilter: {\r\n          ...state.searchFilter,\r\n          keyword: action.payload,\r\n        },\r\n      };\r\n    case \"UPDATE_SEARCH_STATUS\":\r\n      return {\r\n        ...state,\r\n        searchFilter: {\r\n          ...state.searchFilter,\r\n          status: action.payload,\r\n        },\r\n      };\r\n\r\n    case \"RESET_SEARCH\":\r\n      return {\r\n        ...state,\r\n        searchFilter: {\r\n          keyword: \"\",\r\n          status: \"\",\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default itemReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport items from \"./WorkItem/workItemReducer\";\r\n\r\nexport default combineReducers({\r\n  items,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}